
import numpy as np

def floyd_warshall(n, edges):
  
    dist = np.full((n, n), float('inf'))
    for i in range(n):
        dist[i][i] = 0

  
    for u, v, w in edges:
        dist[u][v] = min(dist[u][v], w)
        dist[v][u] = min(dist[v][u], w)


    print("Distance matrix before applying Floyd's Algorithm:")
    print(dist)

  
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

   
    print("Distance matrix after applying Floyd's Algorithm:")
    print(dist)

    return dist

def shortest_path(dist, start, end):
    return dist[start][end]


n = 4
edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
distanceThreshold = 4

dist = floyd_warshall(n, edges)
result = shortest_path(dist, 0, 3)
print(f"Shortest path from City 0 to City 3 = {result}")


edges2 = [[0, 1, 3], [0, 2, 8], [0, 3, -4], [1, 3, 4], [1, 2, 1], [2, 0, 2], [3, 0, -5], [3, 1, 6]]
dist2 = floyd_warshall(4, edges2)
result2 = shortest_path(dist2, 0, 2)
print(f"Shortest path from City 1 to City 3 = {result2}")
