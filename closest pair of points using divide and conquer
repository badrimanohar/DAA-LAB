import math
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
def distance(p1, p2):
    return math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2)
def brute_force(points, n):
    min_dist = float('inf')
    for i in range(n):
        for j in range(i + 1, n):
            if distance(points[i], points[j]) < min_dist:
                min_dist = distance(points[i], points[j])
    return min_dist
def strip_closest(strip, size, d):
    min_dist = d
    for i in range(size):
        for j in range(i + 1, size):
            if abs(strip[i].y - strip[j].y) < min_dist:
                min_dist = distance(strip[i], strip[j])
    return min_dist
def closest_util(points, n):
    if n <= 3:
        return brute_force(points, n)
    mid = n // 2
    mid_point = points[mid]
    dl = closest_util(points[:mid], mid)
    dr = closest_util(points[mid:], n - mid)
    d = min(dl, dr)
    strip = []
    for i in range(n):
        if abs(points[i].x - mid_point.x) < d:
            strip.append(points[i])
    return min(d, strip_closest(strip, len(strip), d))
def closest_pair(points):
    points.sort(key=lambda point: point.x)
    return closest_util(points, len(points))
if __name__ == "__main__":
    points = [Point(2, 3), Point(12, 30), Point(40, 50), Point(5, 1), Point(12, 10), Point(3, 4)]
    result = closest_pair(points)
    print("The smallest distance is", result)
