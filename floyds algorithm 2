

import numpy as np

def floyd_warshall(n, edges):
   
    distance = np.full((n, n), float('inf'))
    for i in range(n):
        distance[i][i] = 0
  for u, v, w in edges:
        distance[u][v] = w
        distance[v][u] = w  # Assuming undirected graph

    print("Distance matrix before applying Floyd's Algorithm:")
    print(distance)

 
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if distance[i][j] > distance[i][k] + distance[k][j]:
                    distance[i][j] = distance[i][k] + distance[k][j]

    print("Distance matrix after applying Floyd's Algorithm:")
    print(distance)

    return distance


n = 5
edges = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]
distance_matrix = floyd_warshall(n, edges)


shortest_path = np.min(distance_matrix)
print("Shortest path:", shortest_path)
